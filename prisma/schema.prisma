// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRODUCTION_DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Store {
  id         String       @id @default(uuid())
  name       String
  userId     String
  billboards Billboards[] @relation("StoreToBillboard")
  collection Collection[] @relation("StoreToCollection")
  sizes      Size[]       @relation("StoreToSize")
  colors     Color[]      @relation("StoreToColor")
  looks      Look[]       @relation("StoreToLook")
  products   Product[]    @relation("StoreToProduct")
  orders     Order[]      @relation("StoreToOrder")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Billboards {
  id          String       @id @default(uuid())
  storeId     String
  store       Store        @relation("StoreToBillboard", fields: [storeId], references: [id])
  collections Collection[]
  label       String
  imageUrl    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Collection {
  id          String     @id @default(uuid())
  storeId     String
  store       Store      @relation("StoreToCollection", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboards @relation(fields: [billboardId], references: [id])
  products    Product[]  @relation("CollectionToProduct")
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  collectionId String
  collection   Collection  @relation("CollectionToProduct", fields: [collectionId], references: [id])
  name         String
  description  String      @db.VarChar(255)
  price        Decimal
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  sizeId       String
  size         Size        @relation(fields: [sizeId], references: [id])
  colorId      String
  color        Color       @relation(fields: [colorId], references: [id])
  image        Image[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
  lookId       String
  look         Look        @relation(fields: [lookId], references: [id])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  totalPrice String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Look {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToLook", fields: [storeId], references: [id])
  products  Product[]
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
